# -*- coding: utf-8 -*-
import math

# Form implementation generated from reading ui file 'UI_File/result_widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import *


class Ui_MainWindow(QMainWindow):

    def __init__(self,marks,words,wrongAns_List,correctAns_List,answer_correct):
        super().__init__()
        self.marks = marks
        self.words = words
        self.wrongAns_List = wrongAns_List
        self.correctAns_List = correctAns_List
        self.answer_correct = answer_correct
        self.setFixedSize(800, 600)
        self.setupUi()
    def setupUi(self):

        self.centralwidget = QtWidgets.QWidget()
        self.centralwidget.setObjectName("centralwidget")

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(60, 110, 661, 351))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.stackAnswer =  QtWidgets.QStackedWidget(self.verticalLayoutWidget)
        self.stackAnswer.setContentsMargins(0, 0, 0, 0)
        self.stackAnswer.setObjectName("verticalLayout")

        self.setCentralWidget(self.centralwidget)
        self.setup_marks_label()
        self.setup_button()
        self.setup_again_label()
        self.setup_show_answer_box()
        # self.retranslateUi()
        # QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        pass
        # _translate = QtCore.QCoreApplication.translate
        # self.setWindowTitle(_translate("MainWindow", "MainWindow"))


    def setup_button(self):
        self.buttonBox = QtWidgets.QDialogButtonBox(self.centralwidget)
        self.buttonBox.setGeometry(QtCore.QRect(510, 500, 191, 41))
        font = QtGui.QFont()
        font.setFamily("STCaiyun")
        font.setPointSize(14)
        self.buttonBox.setFont(font)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.No | QtWidgets.QDialogButtonBox.Yes)
        self.buttonBox.setObjectName("buttonBox")

    def setup_marks_label(self):
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(165, 20, 500, 130))
        font = QtGui.QFont()
        font.setFamily("STCaiyun")
        font.setPointSize(20)
        self.label.setContentsMargins(15, 5, 15, 5)
        self.label.setFont(font)
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        marks_messages = f"marks : {str(self.marks)}" + "\n"
        if len(self.wrongAns_List) > 0:
            marks_messages += f"You have answered {str(len(self.wrongAns_List))} wrong!!!" + "\n"
            marks_messages += f"The wrong Answer and right answer shown below"
        else:
            marks_messages += "Congratulations!!!!!!!!!!!!! \n You got it All right"
        self.label.setText(marks_messages)
    def setup_again_label(self):
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(80, 490, 461, 51))
        font = QtGui.QFont()
        font.setFamily("STCaiyun")
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.label_2.setText( "Do you want to start a new game?")

    def setup_Bars(self):
        pass
        # self.menubar = QtWidgets.QMenuBar(self)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        # self.menubar.setObjectName("menubar")
        # self.setMenuBar(self.menubar)
        # self.statusbar = QtWidgets.QStatusBar(self)
        # self.statusbar.setObjectName("statusbar")
        # self.setStatusBar(self.statusbar)

    def setup_show_answer_box(self):
        count = 0
        page_layout = QVBoxLayout()
        page_index = 0
        print(self.words)
        for (word,wrongAns,correctAns,ans_cor) in zip(self.words,self.wrongAns_List,self.correctAns_List,self.answer_correct):
            #setting layout for every wrong answer
            seperated_words_layout = QHBoxLayout()
            #set up wrong word and pos
            word_layout = QVBoxLayout()
            word = str(word).replace("\t","")
            word_layout.addWidget(QLabel(word))
            seperated_words_layout.addLayout(word_layout,stretch=1)
            answer_layout = QVBoxLayout()
            #set up correct answer widget
            correctAns_widget = QWidget()
            correctAns_layout = QHBoxLayout()
            Str_CorrectAns = QLabel("Correct Answer: ")
            correctAns_meaning = QLabel(correctAns)
            correctAns_layout.addWidget(Str_CorrectAns,stretch=1)
            correctAns_layout.addWidget(correctAns_meaning,stretch=9)
            correctAns_widget.setLayout(correctAns_layout)
            answer_layout.addWidget(correctAns_widget)
            # set up wrong answer widget
            WrongAns_widget = QWidget()
            WrongAns_layout = QHBoxLayout()
            Str_WrongAns = QLabel("User Answer: ")
            WrongAns_meaning = QLabel(wrongAns)
            WrongAns_layout.addWidget(Str_WrongAns,stretch=1)
            WrongAns_layout.addWidget(WrongAns_meaning,stretch=9)
            WrongAns_widget.setLayout(WrongAns_layout)
            answer_layout.addWidget(WrongAns_widget)
            seperated_words_layout.addLayout(answer_layout,stretch=4)
            container = QWidget()
            container.setMaximumSize(self.verticalLayoutWidget.width()-20,self.verticalLayoutWidget.height()/2)
            container.setLayout(seperated_words_layout)
            container.setObjectName("Separate_word")
            # if(ans_cor):
            #     container.setStyleSheet('QWidget#Separate_word { border: 1px solid green}')
            # else:
            #     container.setStyleSheet('QWidget#Separate_word { border: 1px solid red}')
            page_layout.addWidget(container)
            if count == 1:
                #setup button layout
                buttonLayout = QHBoxLayout()
                nextButton = QPushButton("Next")
                # nextButton.setMaximumSize(self.verticalLayoutWidget.width()/2-20,20)
                nextButton.clicked.connect(lambda checked, page_index=page_index:self.nextButtonClicked(page_index))
                if(page_index != 0):
                    backButton = QPushButton("Back")
                    # backButton.setMaximumSize(self.verticalLayoutWidget.width()/2 - 20, 20)
                    backButton.clicked.connect(
                        lambda checked, page_index=page_index: self.backButtonClicked(page_index))
                    buttonLayout.addWidget(backButton,stretch=1)
                buttonLayout.addWidget(nextButton,stretch=1)
                button_widget = QWidget()
                button_widget.setMaximumSize(self.verticalLayoutWidget.width()-20,40)
                button_widget.setLayout(buttonLayout)
                page_layout.addWidget(button_widget)
                pageNum = QLabel(f"{str(page_index+1)}/{str(math.ceil(len(self.words)/2))}")
                pageNum.setMaximumSize(self.verticalLayoutWidget.width()-20,40)
                pageNum.setAlignment(Qt.AlignmentFlag.AlignCenter)
                page_layout.addWidget(pageNum)
                container = QWidget()
                container.setLayout(page_layout)
                self.stackAnswer.addWidget(container)
                page_layout = QVBoxLayout()
                count = 0
                page_index += 1
                continue
            count += 1

    def nextButtonClicked(self, page_index):
        self.stackAnswer.setCurrentIndex(page_index + 1)
    def backButtonClicked(self,page_index):
        self.stackAnswer.setCurrentIndex(page_index - 1)
# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     ui = Ui_MainWindow(100,["word1","word2","word3"],["1234","1234","1234"],["5678","5678","5678"])
#     ui.show()
#     sys.exit(app.exec_())
